diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
index 02821f7..af246e9 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
@@ -51,13 +51,22 @@ module.exports = {
       const { identifier } = params;
 
       // Check if the user exists.
-      const user = await strapi.query('plugin::users-permissions.user').findOne({
+      const user = await strapi.db.query('plugin::users-permissions.user').findOne({
         where: {
-          provider,
           $or: [{ email: identifier.toLowerCase() }, { username: identifier }],
         },
+        populate: {
+          company: {
+            populate: true
+          },
+          department: {
+            populate: true
+          },
+        }
       });
 
+      // console.log("obtained logged user's data here", user);
+
       if (!user) {
         throw new ValidationError('Invalid identifier or password');
       }
@@ -86,9 +95,14 @@ module.exports = {
         throw new ApplicationError('Your account has been blocked by an administrator');
       }
 
+      delete user["password"];
+      delete user["resetPasswordToken"];
+      delete user["confirmationToken"];
+
       return ctx.send({
         jwt: getService('jwt').issue({ id: user.id }),
-        user: await sanitizeUser(user, ctx),
+        // user: await sanitizeUser(user, ctx),
+        user: user
       });
     }
 
diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js
index 1b45e05..d3e89aa 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js
@@ -144,9 +144,26 @@ module.exports = {
    */
   async find(ctx) {
     const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);
-    const users = await getService('user').fetchAll(sanitizedQuery);
+    // const users = await getService('user').fetchAll(sanitizedQuery);
 
-    ctx.body = await Promise.all(users.map((user) => sanitizeOutput(user, ctx)));
+
+    // ctx.body = await Promise.all(users.map((user) => sanitizeOutput(user, ctx)));
+
+    const users = await strapi.db.query('plugin::users-permissions.user').findMany({
+      where: {
+
+      },
+
+      populate: ["company", "department"]
+    });
+
+    // console.log("received users data here all", users);
+
+    ctx.body = users?.map(_user => {
+      delete _user["password"];
+
+      return _user
+    })
   },
 
   /**
@@ -157,13 +174,305 @@ module.exports = {
     const { id } = ctx.params;
     const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);
 
-    let data = await getService('user').fetch(id, sanitizedQuery);
+    /**
+     * let data = await getService('user').fetch(id, sanitizedQuery);
+     */
+
+    let user = await strapi.db.query('plugin::users-permissions.user').findOne({
+      where: {
+        id: id
+      },
+      populate: {
+        contributions: {
+          populate: {
+            file: {
+              populate: true
+            },
+            author: {
+              populate: true
+            },
+            parentDocument: {
+              populate: {
+                levelVersions: {
+                  populate: {
+                    author: {
+                      populate: true
+                    },
+                    file: {
+                      populate: true
+                    }
+                  }
+                },
+                doc_folder: {
+                  populate: true
+                },
+                attachedFiles: {
+                  populate: true
+                }
+              }
+            }
+          },
+        },
+        signatures: {
+          populate: ["sign", "company"]
+        },
+        departnement: {
+          populate: true
+        },
+      },
+    });
+
+    delete user["password"];
+    delete user["resetPasswordToken"];
+    delete user["confirmationToken"];
+
+    // console.log("received connnected user's data", user);
+
+    /**
+     * 
+     *  if (data) {
+       data = await sanitizeOutput(data, ctx);
+     }
+     */
+
+    let pendingDocs = [];
+    let ownDocs = [];
+    let signedDocs = [];
+
+    user?.contributions?.filter(target => {
+      return target?.level <= target?.parentDocument?.validationLevel || target?.level - 1 === target?.parentDocument?.validationLevel
+    })?.forEach(target => {
+
+      const selfRejected = target?.rejectionMessage?.length > 0;
+
+      const isDocumentCompleted = target?.parentDocument?.levelVersions?.filter(target => {
+        return target?.signed === false || target?.rejectionMessage?.length > 1
+      })?.length === 0;
+
+      const maxLevel = Math.max(...target?.parentDocument?.levelVersions?.map(target => {
+        return target?.level
+      }));
+
+      console.log("current document parameter", { isDocumentCompleted, maxLevel });
+
+      let rejectedBy = {};
+
+      let isRejected = target?.parentDocument?.levelVersions?.some(_target => {
+
+        if (_target?.rejectionMessage?.length > 0) {
+          rejectedBy = {
+            ..._target?.author,
+            reason: _target?.rejectionMessage,
+            rejectionDate: _target?.rejectionDate
+          }
+
+          return true
+        }
+
+        return false
+      })
+
+      let remainingSignatures = target?.parentDocument?.levelVersions?.filter(_target => {
+        return _target?.signed == false && !(_target?.rejectionMessage?.length > 0)
+      })?.length;
+
+      // console.log("documents params rejection status etc", { isRejected, rejectedBy, remainingSignatures });
+
+      target["versionId"] = target?.id;
+
+      if (target?.level === 1) {
+
+        const datum = {
+          ...target,
+          ...target?.parentDocument,
+          // file: target?.parentDocument?.levelVersions?.sort((_target1, _target2) => {
+
+          //   return _target2?.level - _target1?.level
+          // })[0]?.file,
+          file: target?.parentDocument?.levelVersions?.find((target) => {
+
+            return isDocumentCompleted ? target?.level === maxLevel : target?.level === 1
+          })?.file,
+          author: target?.parentDocument?.levelVersions?.find(_target => {
+            return _target?.level === 1
+          })?.author,
+
+          recipients: target?.parentDocument?.levelVersions?.map(_target => {
+            return _target?.author
+          }),
+          parentDocument: undefined,
+          // levelVersions: undefined,
+          status: target?.signed ? "signé" : selfRejected ? "rejeté" : `en attente`,
+          finalStatus: isRejected ? "rejeté" : remainingSignatures > 0 ? `reste ${remainingSignatures}` : "complété",
+          rejectedBy
+        };
+
+        datum.levelVersions = datum?.levelVersions?.map(version => {
+          delete version["parentDocument"]
+
+
+          version["author"] = {
+            ...version["author"],
+            contributions: undefined,
+            parentDocument: undefined,
+          }
+
+
+          console.log("currently processed verion datum", version);
+
+          return version
+        });
+
+        datum.author = {
+          ...datum?.author,
+          contributions: undefined
+        };
+
+        datum.recipients = datum?.recipients?.map(target => {
+
+          return {
+            ...target,
+            contributions: undefined
+          }
+        })
+
+        if (datum?.rejectedBy?.contributions) {
+          datum.rejectedBy.contributions = undefined
+        }
+
+        ownDocs?.push(datum);
+      }
+      if (target?.signed) {
+
+
+        const datum = {
+          ...target,
+          ...target?.parentDocument,
+
+          file: target?.parentDocument?.levelVersions?.find((target) => {
+            return isDocumentCompleted ? target?.level === maxLevel : target?.level === 1
+          })?.file,
+          author: target?.parentDocument?.levelVersions?.find(_target => {
+            return _target?.level === 1
+          })?.author,
+          recipients: target?.parentDocument?.levelVersions?.map(_target => {
+            return _target?.author
+          }),
+          parentDocument: undefined,
+          // levelVersions: undefined,
+          status: target?.signed ? "signé" : selfRejected ? "rejeté" : `en attente`,
+          finalStatus: isRejected ? "rejeté" : remainingSignatures > 0 ? `reste ${remainingSignatures}` : "complété",
+          rejectedBy
+        };
+
+        datum.author = {
+          ...datum?.author,
+          contributions: undefined
+        };
+
+        datum.recipients = datum?.recipients?.map(target => {
+
+          return {
+            ...target,
+            contributions: undefined
+          }
+        })
+
+        if (datum?.rejectedBy?.contributions) {
+          datum.rejectedBy.contributions = undefined
+        }
 
-    if (data) {
-      data = await sanitizeOutput(data, ctx);
+        datum.levelVersions = datum?.levelVersions?.map(version => {
+
+          version["author"] = {
+            ...version["author"],
+            contributions: undefined,
+            parentDocument: undefined,
+          }
+
+          return version
+        });
+
+
+
+        signedDocs?.push(datum)
+      } else {
+
+
+        const datum = {
+          ...target,
+          ...target?.parentDocument,
+          file: target?.parentDocument?.levelVersions?.find((target) => {
+
+            // console.log("file processed file target", target);
+
+            return target?.level === 1
+          })?.file,
+          author: target?.parentDocument?.levelVersions?.find(_target => {
+            return _target?.level === 1
+          })?.author,
+          recipients: target?.parentDocument?.levelVersions?.map(_target => {
+            return _target?.author
+          }),
+          parentDocument: undefined,
+          // levelVersions: undefined,
+          status: target?.signed ? "signé" : selfRejected ? "rejeté" : `en attente`,
+          finalStatus: isRejected ? "rejeté" : remainingSignatures > 0 ? `reste ${remainingSignatures}` : "complété",
+          rejectedBy
+        };
+
+        datum.levelVersions = datum?.levelVersions?.map(version => {
+          delete version["parentDocument"]
+          delete version["file"]
+
+
+          version["author"] = {
+            ...version["author"],
+            contributions: undefined,
+            parentDocument: undefined,
+          }
+
+          console.log("currently processed verion datum", version);
+
+          return version;
+        });
+
+
+
+        datum.author = {
+          ...datum?.author,
+          contributions: undefined
+        };
+
+        datum.recipients = datum?.recipients?.map(target => {
+
+          return {
+            ...target,
+            contributions: undefined
+          }
+        })
+
+        if (datum?.rejectedBy?.contributions) {
+          datum.rejectedBy.contributions = undefined
+        }
+
+        pendingDocs?.push(datum)
+      }
+
+    });
+
+    // console.log("processed docs for plotting", { pendingDocs, ownDocs, signedDocs });
+
+    user = {
+      ...user,
+      pendingDocs,
+      ownDocs,
+      signedDocs
     }
 
-    ctx.body = data;
+    delete user["contributions"]
+
+    ctx.body = user;
   },
 
   /**
diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/user.js b/node_modules/@strapi/plugin-users-permissions/server/services/user.js
index 27cf71a..9d3c3e3 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/user.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/user.js
@@ -59,7 +59,10 @@ module.exports = ({ strapi }) => ({
    * @return {Promise}
    */
   fetch(id, params) {
-    return strapi.entityService.findOne('plugin::users-permissions.user', id, params);
+    return strapi.entityService.findOne('plugin::users-permissions.user', id, {
+      ...params,
+      populate: { company: true },
+    });
   },
 
   /**
@@ -77,7 +80,10 @@ module.exports = ({ strapi }) => ({
    * @return {Promise}
    */
   fetchAll(params) {
-    return strapi.entityService.findMany('plugin::users-permissions.user', params);
+    return strapi.entityService.findMany('plugin::users-permissions.user',  {
+      ...params,
+      populate: { company: true },
+    });
   },
 
   /**
