diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
index 02821f7..00f19fd 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
@@ -51,13 +51,28 @@ module.exports = {
       const { identifier } = params;
 
       // Check if the user exists.
-      const user = await strapi.query('plugin::users-permissions.user').findOne({
+      const user = await strapi.db.query('plugin::users-permissions.user').findOne({
         where: {
-          provider,
           $or: [{ email: identifier.toLowerCase() }, { username: identifier }],
         },
+        populate: {
+          company: {
+            populate: true
+          },
+          department: {
+            populate: true
+          },
+          profile: {
+            populate: true
+          },
+          role: {
+            populate: true
+          }
+        }
       });
 
+      // console.log("obtained logged user's data here", user);
+
       if (!user) {
         throw new ValidationError('Invalid identifier or password');
       }
@@ -86,9 +101,16 @@ module.exports = {
         throw new ApplicationError('Your account has been blocked by an administrator');
       }
 
+      delete user["password"];
+      delete user["resetPasswordToken"];
+      delete user["confirmationToken"];
+
+      user.role = user?.role?.name
+
       return ctx.send({
         jwt: getService('jwt').issue({ id: user.id }),
-        user: await sanitizeUser(user, ctx),
+        // user: await sanitizeUser(user, ctx),
+        user: user
       });
     }
 
@@ -228,11 +250,12 @@ module.exports = {
     const emailBody = await getService('users-permissions').template(
       resetPasswordSettings.message,
       {
-        URL: advancedSettings.email_reset_password,
+        URL: `${process.env.IO_ORIGIN}/auth/reset-password`,
         SERVER_URL: getAbsoluteServerUrl(strapi.config),
         ADMIN_URL: getAbsoluteAdminUrl(strapi.config),
         USER: userInfo,
         TOKEN: resetPasswordToken,
+        NAME: userInfo?.username
       }
     );
 
diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js
index 1b45e05..c63bc7e 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/user.js
@@ -11,6 +11,8 @@ const utils = require('@strapi/utils');
 const { getService } = require('../utils');
 const { validateCreateUserBody, validateUpdateUserBody } = require('./validation/user');
 
+const { parseDocuments } = require("../utils/parseDocuments")
+
 const { sanitize } = utils;
 const { ApplicationError, ValidationError, NotFoundError } = utils.errors;
 
@@ -144,9 +146,27 @@ module.exports = {
    */
   async find(ctx) {
     const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);
-    const users = await getService('user').fetchAll(sanitizedQuery);
+    // const users = await getService('user').fetchAll(sanitizedQuery);
+
+
+    // ctx.body = await Promise.all(users.map((user) => sanitizeOutput(user, ctx)));
+
+    const users = await strapi.db.query('plugin::users-permissions.user').findMany({
+      where: {
+
+      },
+
+      populate: ["company", "department", "role"]
+    });
+
+    // console.log("received users data here all", users);
 
-    ctx.body = await Promise.all(users.map((user) => sanitizeOutput(user, ctx)));
+    ctx.body = users?.map(_user => {
+      delete _user["password"];
+      _user.role = _user?.role?.id;
+
+      return _user
+    })
   },
 
   /**
@@ -157,13 +177,394 @@ module.exports = {
     const { id } = ctx.params;
     const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);
 
-    let data = await getService('user').fetch(id, sanitizedQuery);
+    /**
+     * let data = await getService('user').fetch(id, sanitizedQuery);
+     */
+
+    let user = await strapi.db.query('plugin::users-permissions.user').findOne({
+      where: {
+        $and: [
+          {
+            id: id,
+          },
+        ]
+      },
+      populate: {
+        documentsToView: {
+          populate: {
+            levelVersions: {
+              populate: {
+                file: {
+                  populate: true
+                },
+                author: {
+                  populate: true
+                },
+                parentDocument: {
+                  populate: {
+                    levelVersions: {
+                      populate: {
+                        author: {
+                          populate: true
+                        },
+                        file: {
+                          populate: true
+                        },
+                        displayObjects: {
+                          populate: true
+                        }
+                      },
+                    },
+                    doc_folder: {
+                      populate: true
+                    },
+                    annexes: {
+                      populate: {
+                        levelVersions: {
+                          populate: {
+                            author: {
+                              populate: true
+                            },
+                            file: {
+                              populate: true
+                            },
+                            displayObjects: {
+                              populate: true
+                            }
+                          }
+                        },
+                        underlying_file: {
+                          populate: true
+                        }
+                      }
+                    }
+                  }
+                }
+              },
+            }
+          }
+        },
+        contributions: {
+          populate: {
+            file: {
+              populate: true
+            },
+            author: {
+              populate: true
+            },
+            parentDocument: {
+              populate: {
+                levelVersions: {
+                  populate: {
+                    author: {
+                      populate: true
+                    },
+                    file: {
+                      populate: true
+                    },
+                    displayObjects: {
+                      populate: true
+                    }
+                  },
+                },
+                doc_folder: {
+                  populate: true
+                },
+                annexes: {
+                  populate: {
+                    levelVersions: {
+                      populate: {
+                        author: {
+                          populate: true
+                        },
+                        file: {
+                          populate: true
+                        },
+                        displayObjects: {
+                          populate: true
+                        }
+                      }
+                    },
+                    underlying_file: {
+                      populate: true
+                    }
+                  }
+                }
+              }
+            }
+          },
+        },
+        signatures: {
+          populate: ["sign", "company"]
+        },
+        departnement: {
+          populate: true
+        },
+      },
+    });
+
+    delete user["password"];
+    delete user["resetPasswordToken"];
+    delete user["confirmationToken"];
+
+    // user?.contributions?.push(...user?.documentsToView?.map(target => {
+    //   return target?.levelVersions?.find(_target => {
+    //     return _target?.level === 1
+    //   })
+    // }));
+
+    const viewVersions = user["documentsToView"]?.map(target => {
+      const _version = target?.levelVersions?.find(_target => {
+        return _target?.level === 1
+      });
+
+      console.log("current version here", _version);
+
+      return _version
+    })
+
+    user.contributions.push(...viewVersions)
+    
+    // console.log("computed user's view contributions", viewVersions);
+
+    delete user["documentsToView"]
+
+    let pendingDocs = [];
+    let ownDocs = [];
+    let signedDocs = [];
+
+    user?.contributions?.filter(target => {
+      return (target?.level <= target?.parentDocument?.validationLevel || target?.level - 1 === target?.parentDocument?.validationLevel) && target?.isAnnex === false && target?.parentDocument?.annexesCompleted !== false
+    })?.forEach(target => {
+
+      const selfRejected = target?.rejectionMessage?.length > 0;
+
+      const isDocumentCompleted = target?.parentDocument?.levelVersions?.filter(target => {
+        return target?.signed === false || target?.rejectionMessage?.length > 1
+      })?.length === 0;
+
+      const maxLevel = Math.max(...target?.parentDocument?.levelVersions?.map(target => {
+        return target?.level
+      }));
+
+      console.log("current document parameter", { isDocumentCompleted, maxLevel });
+
+      let rejectedBy = {};
+
+      let isRejected = target?.parentDocument?.levelVersions?.some(_target => {
+        if (_target?.rejectionMessage?.length > 0) {
+          rejectedBy = {
+            ..._target?.author,
+            reason: _target?.rejectionMessage,
+            rejectionDate: _target?.rejectionDate
+          }
+
+          return true
+        }
+
+        return false
+      })
+
+      let remainingSignatures = target?.parentDocument?.levelVersions?.filter(_target => {
+        return _target?.signed == false && !(_target?.rejectionMessage?.length > 0)
+      })?.length;
+
+      // the id of the contribution (version) of the current user for the current document, one contrib per document (one versionId)
+      target["versionId"] = target?.id;
+
+      if (target?.level === 1) {
+
+        const datum = {
+          ...target,
+          ...target?.parentDocument,
+          // file: target?.parentDocument?.levelVersions?.sort((_target1, _target2) => {
+
+          //   return _target2?.level - _target1?.level
+          // })[0]?.file,
+          file: target?.parentDocument?.levelVersions?.find((target) => {
+
+            return isDocumentCompleted ? target?.level === maxLevel : target?.level === 1
+          })?.file,
+          author: target?.parentDocument?.levelVersions?.find(_target => {
+            return _target?.level === 1
+          })?.author,
+
+          recipients: target?.parentDocument?.levelVersions?.map(_target => {
+            return _target?.author
+          }),
+          parentDocument: undefined,
+          // levelVersions: undefined,
+          status: target?.signed ? "signé" : selfRejected ? "rejeté" : `en attente`,
+          finalStatus: isRejected ? "rejeté" : remainingSignatures > 0 ? `reste ${remainingSignatures}` : "complété",
+          rejectedBy
+        };
+
+        datum.levelVersions = datum?.levelVersions?.map(version => {
+          delete version["parentDocument"]
+
+
+          version["author"] = {
+            ...version["author"],
+            contributions: undefined,
+            parentDocument: undefined,
+          }
+
+
+          // console.log("currently processed verion datum", version);
+
+          return version
+        });
+
+        datum.author = {
+          ...datum?.author,
+          contributions: undefined
+        };
+
+        datum.recipients = datum?.recipients?.map(target => {
+
+          return {
+            ...target,
+            contributions: undefined
+          }
+        })
+
+        if (datum?.rejectedBy?.contributions) {
+          datum.rejectedBy.contributions = undefined
+        }
+
+        ownDocs?.push(datum);
+      }
+      if (target?.signed) {
+
+
+        const datum = {
+          ...target,
+          ...target?.parentDocument,
+
+          file: target?.parentDocument?.levelVersions?.find((target) => {
+            return isDocumentCompleted ? target?.level === maxLevel : target?.level === 1
+          })?.file,
+          author: target?.parentDocument?.levelVersions?.find(_target => {
+            return _target?.level === 1
+          })?.author,
+          recipients: target?.parentDocument?.levelVersions?.map(_target => {
+            return _target?.author
+          }),
+          parentDocument: undefined,
+          // levelVersions: undefined,
+          status: target?.signed ? "signé" : selfRejected ? "rejeté" : `en attente`,
+          finalStatus: isRejected ? "rejeté" : remainingSignatures > 0 ? `reste ${remainingSignatures}` : "complété",
+          rejectedBy
+        };
+
+        datum.author = {
+          ...datum?.author,
+          contributions: undefined
+        };
+
+        datum.recipients = datum?.recipients?.map(target => {
+
+          return {
+            ...target,
+            contributions: undefined
+          }
+        })
 
-    if (data) {
-      data = await sanitizeOutput(data, ctx);
+        if (datum?.rejectedBy?.contributions) {
+          datum.rejectedBy.contributions = undefined
+        }
+
+        datum.levelVersions = datum?.levelVersions?.map(version => {
+
+          version["author"] = {
+            ...version["author"],
+            contributions: undefined,
+            parentDocument: undefined,
+          }
+
+          return version
+        });
+
+
+
+        signedDocs?.push(datum)
+      } else {
+
+
+        const datum = {
+          ...target,
+          ...target?.parentDocument,
+          file: target?.parentDocument?.levelVersions?.find((target) => {
+
+            // console.log("file processed file target", target);
+
+            return target?.level === 1
+          })?.file,
+          author: target?.parentDocument?.levelVersions?.find(_target => {
+            return _target?.level === 1
+          })?.author,
+          recipients: target?.parentDocument?.levelVersions?.map(_target => {
+            return _target?.author
+          }),
+          parentDocument: undefined,
+          // levelVersions: undefined,
+          status: target?.signed ? "signé" : selfRejected ? "rejeté" : `en attente`,
+          finalStatus: isRejected ? "rejeté" : remainingSignatures > 0 ? `reste ${remainingSignatures}` : "complété",
+          rejectedBy
+        };
+
+        datum.levelVersions = datum?.levelVersions?.map(version => {
+          delete version["parentDocument"]
+          delete version["file"]
+
+
+          version["author"] = {
+            ...version["author"],
+            contributions: undefined,
+            parentDocument: undefined,
+          }
+
+          console.log("currently processed verion datum", version);
+
+          return version;
+        });
+
+
+
+        datum.author = {
+          ...datum?.author,
+          contributions: undefined
+        };
+
+        datum.recipients = datum?.recipients?.map(target => {
+
+          return {
+            ...target,
+            contributions: undefined
+          }
+        })
+
+        if (datum?.rejectedBy?.contributions) {
+          datum.rejectedBy.contributions = undefined
+        }
+
+        pendingDocs?.push(datum)
+      }
+
+    });
+
+    // console.log("processed docs for plotting", { pendingDocs, ownDocs, signedDocs });
+
+    user = {
+      ...user,
+      pendingDocs: parseDocuments(pendingDocs),
+      ownDocs: parseDocuments(ownDocs),
+      signedDocs: parseDocuments(signedDocs)
     }
 
-    ctx.body = data;
+    delete user["contributions"]
+
+    ctx.body = user;
   },
 
   /**
diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/user.js b/node_modules/@strapi/plugin-users-permissions/server/services/user.js
index 27cf71a..9d3c3e3 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/user.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/user.js
@@ -59,7 +59,10 @@ module.exports = ({ strapi }) => ({
    * @return {Promise}
    */
   fetch(id, params) {
-    return strapi.entityService.findOne('plugin::users-permissions.user', id, params);
+    return strapi.entityService.findOne('plugin::users-permissions.user', id, {
+      ...params,
+      populate: { company: true },
+    });
   },
 
   /**
@@ -77,7 +80,10 @@ module.exports = ({ strapi }) => ({
    * @return {Promise}
    */
   fetchAll(params) {
-    return strapi.entityService.findMany('plugin::users-permissions.user', params);
+    return strapi.entityService.findMany('plugin::users-permissions.user',  {
+      ...params,
+      populate: { company: true },
+    });
   },
 
   /**
diff --git a/node_modules/@strapi/plugin-users-permissions/server/utils/parseDocuments.js b/node_modules/@strapi/plugin-users-permissions/server/utils/parseDocuments.js
new file mode 100644
index 0000000..8db99da
--- /dev/null
+++ b/node_modules/@strapi/plugin-users-permissions/server/utils/parseDocuments.js
@@ -0,0 +1,69 @@
+
+// utility function definition
+
+const parseDocuments = (docObjects) => {
+    return docObjects?.sort((prev, next) => {
+        return new Date(next?.createdAt).getTime() - new Date(prev?.createdAt).getTime()
+    })?.map((target) => {
+
+        // console.log("received datat target for single doc", target);
+
+        return {
+            id: target?.id,
+            author: {
+                fullName:
+                    target?.author?.username,
+                id: target?.author?.id,
+                profile: `${process.env.API_HOST}${target?.author?.profile?.url}`
+            },
+            title: target?.title,
+            recipients: target?.recipients?.map(
+                (recipient) => {
+                    return {
+                        fullName: recipient?.username,
+                        id: recipient?.id,
+                        profile: `${process.env.API_HOST}${recipient?.profile?.url}`,
+                        email: recipient?.email,
+                        department:
+                            recipient?.department?.name,
+                    };
+                }
+            ),
+            issuyingDate: new Date(
+                target?.createdAt
+            )?.toLocaleString("fr-FR"),
+            expiryDate: new Date(
+                target?.expiryDate
+            )?.toLocaleString("fr-FR"),
+            department: target?.department,
+            status: target?.status,
+            finalStatus: target?.finalStatus,
+            file: {
+                name: target?.file?.data
+                    ?.name,
+                path: `${process.env.API_HOST}${target?.file?.url}`,
+            },
+            versionId: target?.versionId,
+            rejectedBy: target?.rejectedBy,
+            rejectionDate: target?.rejectionDate,
+            dateCoords: target?.dateCoords,
+            signCoords: target?.signCoords,
+            datePage: target?.datePage,
+            signPage: target?.signPage,
+            doc_folder: target?.doc_folder,
+            attachedFiles: target?.annexes?.map(doc => {
+                return {
+                    ...parseDocuments([doc])[0],
+                    name: doc?.title,
+                    path: `${process.env.API_HOST}${doc?.underlying_file?.url}`,
+                    title: undefined
+                }
+            }),
+            levelVersions: target?.levelVersions,
+            validationLevel: target?.validationLevel,
+            createdAt: target?.createdAt
+        };
+    });
+};
+
+module.exports =  { parseDocuments };
